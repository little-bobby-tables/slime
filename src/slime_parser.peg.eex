document <- doctype? tag+ crlf* eof;

doctype <- space? 'doctype' space name:(!eol .)+ eol;

tag <- (comment / verbatim_text / tag_item) crlf*;

tag_item <- space? (embedded_engine / inline_html / code / html_tag);

inline_html <- &'<' text_content nested_tags?;

html_tag <- inline_tag / simple_tag;

inline_tag <- tag:tag_shortcut spaces:tag_spaces? ':'
  space children:(inline_tag / simple_tag);

simple_tag <- tag:tag_shortcut spaces:tag_spaces space?
  content:attributes_with_content children:nested_tags?;

nested_tags <- crlf blank_line* indent children:tag+ dedent;

code <- inline:('=' '='? tag_spaces? / '-') space?
  code:code_lines children:nested_tags? optional_else:code_else_condition?;
code_else_condition <- blank_line* '-' space* 'else' space*
  children:nested_tags?;
code_lines <- code_line
            / code_line_with_brake crlf (indent code_lines dedent / code_lines);
code_line <- (!(. eol) .)* !code_line_break . &eol;
code_line_with_brake <- (!(. eol) .)* code_line_break &eol;
code_line_break <-  ',' / '\\';

attributes_with_content <- attributes space? simple_tag_content?
                         / simple_tag_content_without_attrs;

simple_tag_content <- '/' / dynamic_content / text_content;

% NOTE: tag content can not begin from valid wrapped attributes bracket if attributes are not present
simple_tag_content_without_attrs <-
  !('<%= attr_list_delims |> Map.keys |> Enum.join("' / '") %>') simple_tag_content;

text_content <- dynamic:text_with_interpolation / simple:text;

dynamic_content <- '=' '='? space? (!eol .)+;

tag_spaces <- leading:'<'? trailing:'>'?;

tag_shortcut <- tag:tag_name attrs:shortcuts / tag:tag_name / attrs:shortcuts;

shortcuts <- head:shortcut tail:(shortcut)*;

shortcut <- type:('.' / '#' / '@' / '$' / '%' / '^' / '&' / '+' / '!') value:tag_name;

attributes <- wrapped_attributes / plain_attributes;

wrapped_attributes <-
  <%=
    attr_list_delims
    |> Enum.map(fn ({open, close}) -> "'#{open}' wrapped_attributes_list '#{close}'" end)
    |> Enum.join(" / ")
  %>;

wrapped_attributes_list <- head:wrapped_attribute tail:(space wrapped_attribute)*;

wrapped_attribute <- attribute:attribute / attribute_name:tag_name;

plain_attributes <- head:attribute tail:(space attribute)*;

attribute <- attribute_name '=' attribute_value;

attribute_value <- simple:string / dynamic:(string_with_interpolation / attribute_code);

string <- '"' ('\\' . / !('"' / '#') .)* '"';

% TODO: separate static and dynamic blocks
string_with_interpolation <- '"' (interpolation / '\\' . / !'"' .)* '"';

attribute_code <- (parentheses / brackets / braces / !(space / eol / ')' / ']' / '}') .)+;

text_with_interpolation <- (text interpolation)+ (!eol .)*;

text <- ('\\' . / !('#{' / eol) .)*;

parentheses <- '(' (parentheses / !')' .)* ')';
brackets <- '[' (brackets / !']' .)* ']';
braces <- '{' (braces / !'}' .)* '}';

interpolation <- '#{' (string / string_with_interpolation / !'}' .)* '}';

comment <- html_comment / space? code_comment;

html_comment <- indent:space? type:'/!' content:text_block;

code_comment <- '/' text_block;

verbatim_text <- indent:space? type:[|'] content:text_block;

text_block <- text_block_line (crlf
  indent lines:text_block_nested_lines dedent)?;
text_block_nested_lines <- text_block_line (crlf (
  indent text_block_nested_lines dedent / text_block_nested_lines
))*;
text_block_line <- space? (dynamic:text_with_interpolation / simple:text);

embedded_engine <- tag_name ':' (
  crlf indent lines:embedded_engine_lines dedent / empty:('' &eol)
);
embedded_engine_lines <- embedded_engine_line (crlf embedded_engine_lines)*;
embedded_engine_line <- text_with_interpolation / text / '';

tag_name <- [a-zA-Z0-9_-]+;
attribute_name <- [a-zA-Z0-9_@:-]+;
blank_line <- space* crlf;
space <- [ \t]+;
indent <- '\x{0E}';
dedent <- '\x{0F}';
crlf <- '\r'? '\n';
eof <- !.;
eol <- dedent / crlf / eof;
